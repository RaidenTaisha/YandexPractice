#pragma once

#include "geo.h"

#include <deque>
#include <string>
#include <string_view>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>

namespace tc {

struct Stop {
  std::string name_;
  Coordinates coordinates_;
};

struct Route {
  std::string name_;
  std::vector<Stop *> stops_;
};

struct RouteInfo {
  size_t total_stops_{};
  size_t unique_stops_{};
  double direct_length_{};
  size_t real_length_{};
};

struct StopsPairHasher {
  size_t operator()(const std::pair<const Stop *, const Stop *> &stops) const {
    if (stops.first->coordinates_ != stops.second->coordinates_)
      return salt_ * hasher_(stops.first->name_) + hasher_(stops.second->name_);
    return hasher_(stops.first->name_) + hasher_(stops.second->name_);
  }

  // –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ –ê –∏ –ë –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è. –•—ç—à –ø–∞—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
  // –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—É—Ç—ë–º —Å–ª–æ–∂–µ–Ω–∏—è —Ö—ç—à–µ–π –¥–≤—É—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –¥–ª—è –ø–∞—Ä –≤–∏–¥–∞ (–ê; –ë) –∏ (–ë; –ê). –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º
  // –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–º–Ω–æ–∂–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–∞–≥–∞–µ–º—ã—Ö –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π.
  static constexpr int salt_ = 10;
  std::hash<std::string> hasher_;
};

class TransportCatalogue {
 public:
  void AddStop(const std::string& name, const Coordinates& coordinates);
  void AddRoute(const std::string& name, const std::vector<std::string_view>& stops);
  void SetDistance(const std::pair<const Stop *, const Stop *> &stops, size_t distance);

  const Route *GetRoute(const std::string_view& name) const;
  const Stop *GetStop(const std::string_view& name) const;
  size_t GetDistance(const std::pair<const Stop *, const Stop *> &stops) const;
  const std::set<std::string_view>& GetRoutes(const std::string_view& stop_name) const;

  RouteInfo GetRouteInfo(const std::string_view& name) const;

 private:
  std::deque<Stop> stops_;
  std::deque<Route> routes_;
  std::unordered_map<std::string_view, Stop *> stopname_to_stop_;
  std::unordered_map<std::string_view, Route *> routename_to_route_;

  /* –Ø –ø—Ä–µ–¥–ø–æ—á–µ–ª –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ unordered_set, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ –≤—ã–≤–æ–¥–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º
   * –ø–æ—Ä—è–¥–∫–µ. –ù–æ —Å unordered_set —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Ç–µ—Å—Ç–∞—Ö –≤—ã–≤–æ–¥ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º
   * –ø–æ—Ä—è–¥–∫–µ üôÇ.*/
  std::unordered_map<std::string_view, std::set<std::string_view>> stopname_to_routenames_;
  std::unordered_map<std::pair<const Stop *, const Stop *>, size_t, StopsPairHasher> distances_;
};

}
